import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "serialhandler.h"
        name: "SerialHandler"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["ScopeX/SerialHandler 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Enum {
            name: "WaveformType"
            values: [
                "SineWave",
                "SquareWave",
                "TriangleWave",
                "RampUpWave",
                "RampDownWave",
                "ArbitraryWave"
            ]
        }
        Property {
            name: "availablePorts"
            type: "QStringList"
            read: "availablePorts"
            notify: "portsChanged"
            index: 0
            isReadonly: true
        }
        Property {
            name: "connected"
            type: "bool"
            read: "connected"
            notify: "connectionChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "statusMessage"
            type: "QString"
            read: "statusMessage"
            notify: "statusChanged"
            index: 2
            isReadonly: true
        }
        Signal { name: "portsChanged" }
        Signal { name: "connectionChanged" }
        Signal {
            name: "statusChanged"
            Parameter { name: "message"; type: "QString" }
        }
        Signal {
            name: "dataReceived"
            Parameter { name: "ch1Data"; type: "QVariantList" }
            Parameter { name: "ch2Data"; type: "QVariantList" }
        }
        Signal {
            name: "dftCalculated"
            Parameter { name: "dftData"; type: "QVariantList" }
        }
        Signal {
            name: "digitalInputsChanged"
            Parameter { name: "inputs"; type: "quint8" }
        }
        Method { name: "refreshPorts" }
        Method {
            name: "connectToPort"
            type: "bool"
            Parameter { name: "portName"; type: "QString" }
        }
        Method { name: "disconnectPort" }
        Method {
            name: "setupScope"
            Parameter { name: "triggerMode"; type: "int" }
            Parameter { name: "triggerPolarity"; type: "int" }
            Parameter { name: "displayMode"; type: "int" }
            Parameter { name: "ch1Gain"; type: "double" }
            Parameter { name: "ch2Gain"; type: "double" }
            Parameter { name: "ch1Offset"; type: "int" }
            Parameter { name: "ch2Offset"; type: "int" }
            Parameter { name: "triggerLevel"; type: "int" }
            Parameter { name: "sampleRate"; type: "int" }
        }
        Method {
            name: "runCapture"
            Parameter { name: "continuous"; type: "bool" }
        }
        Method { name: "stopCapture" }
        Method { name: "abortOperation" }
        Method {
            name: "setDDSWaveform"
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "setDDSFrequency"
            Parameter { name: "frequency"; type: "double" }
        }
        Method { name: "runDDS" }
        Method { name: "stopDDS" }
        Method {
            name: "loadArbitraryWaveform"
            Parameter { name: "data"; type: "quint8"; isList: true }
        }
        Method {
            name: "setDigitalOutputs"
            Parameter { name: "outputs"; type: "quint8" }
        }
        Method { name: "readDigitalInputs"; type: "quint8" }
        Method {
            name: "startSweep"
            Parameter { name: "startFreq"; type: "double" }
            Parameter { name: "endFreq"; type: "double" }
            Parameter { name: "steps"; type: "int" }
            Parameter { name: "delayMs"; type: "int" }
        }
        Method { name: "stopSweep" }
        Method { name: "handleReadyRead" }
        Method {
            name: "handleError"
            Parameter { name: "error"; type: "QSerialPort::SerialPortError" }
        }
    }
}
